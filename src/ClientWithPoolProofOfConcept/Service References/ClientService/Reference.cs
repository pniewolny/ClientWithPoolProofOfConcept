//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace ClientWithPoolProofOfConcept.ClientService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataDto", Namespace="http://schemas.datacontract.org/2004/07/ClientWithPoolProofOfConcept.Shared.Web")]
    public partial class DataDto : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<ClientWithPoolProofOfConcept.Shared.Web.Person> PersonsField;
        
        private System.Collections.ObjectModel.ObservableCollection<ClientWithPoolProofOfConcept.Shared.Web.WorkCenter> WorkCentersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ClientWithPoolProofOfConcept.Shared.Web.Person> Persons {
            get {
                return this.PersonsField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonsField, value) != true)) {
                    this.PersonsField = value;
                    this.RaisePropertyChanged("Persons");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ClientWithPoolProofOfConcept.Shared.Web.WorkCenter> WorkCenters {
            get {
                return this.WorkCentersField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkCentersField, value) != true)) {
                    this.WorkCentersField = value;
                    this.RaisePropertyChanged("WorkCenters");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClientService.ICommunicationService", CallbackContract=typeof(ClientWithPoolProofOfConcept.ClientService.ICommunicationServiceCallback))]
    public interface ICommunicationService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommunicationService/LogIn", ReplyAction="http://tempuri.org/ICommunicationService/LogInResponse")]
        System.IAsyncResult BeginLogIn(System.Guid owner, System.AsyncCallback callback, object asyncState);
        
        int EndLogIn(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommunicationService/AddPerson", ReplyAction="http://tempuri.org/ICommunicationService/AddPersonResponse")]
        System.IAsyncResult BeginAddPerson(ClientWithPoolProofOfConcept.Shared.Web.Person person, System.AsyncCallback callback, object asyncState);
        
        void EndAddPerson(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommunicationService/AddWorkCenter", ReplyAction="http://tempuri.org/ICommunicationService/AddWorkCenterResponse")]
        System.IAsyncResult BeginAddWorkCenter(ClientWithPoolProofOfConcept.Shared.Web.WorkCenter workCenter, System.AsyncCallback callback, object asyncState);
        
        void EndAddWorkCenter(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommunicationService/LoadData", ReplyAction="http://tempuri.org/ICommunicationService/LoadDataResponse")]
        System.IAsyncResult BeginLoadData(System.AsyncCallback callback, object asyncState);
        
        ClientWithPoolProofOfConcept.ClientService.DataDto EndLoadData(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommunicationServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://microsoft.com/samples/pollingDuplex/notification")]
        void Notify(System.ServiceModel.Channels.Message request);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommunicationServiceChannel : ClientWithPoolProofOfConcept.ClientService.ICommunicationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LogInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LogInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoadDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoadDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ClientWithPoolProofOfConcept.ClientService.DataDto Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ClientWithPoolProofOfConcept.ClientService.DataDto)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommunicationServiceClient : System.ServiceModel.DuplexClientBase<ClientWithPoolProofOfConcept.ClientService.ICommunicationService>, ClientWithPoolProofOfConcept.ClientService.ICommunicationService {
        
        private BeginOperationDelegate onBeginLogInDelegate;
        
        private EndOperationDelegate onEndLogInDelegate;
        
        private System.Threading.SendOrPostCallback onLogInCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddPersonDelegate;
        
        private EndOperationDelegate onEndAddPersonDelegate;
        
        private System.Threading.SendOrPostCallback onAddPersonCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddWorkCenterDelegate;
        
        private EndOperationDelegate onEndAddWorkCenterDelegate;
        
        private System.Threading.SendOrPostCallback onAddWorkCenterCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoadDataDelegate;
        
        private EndOperationDelegate onEndLoadDataDelegate;
        
        private System.Threading.SendOrPostCallback onLoadDataCompletedDelegate;
        
        private bool useGeneratedCallback;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public CommunicationServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CommunicationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CommunicationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CommunicationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CommunicationServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public CommunicationServiceClient(string endpointConfigurationName) : 
                this(new CommunicationServiceClientCallback(), endpointConfigurationName) {
        }
        
        private CommunicationServiceClient(CommunicationServiceClientCallback callbackImpl, string endpointConfigurationName) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfigurationName) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public CommunicationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new CommunicationServiceClientCallback(), binding, remoteAddress) {
        }
        
        private CommunicationServiceClient(CommunicationServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public CommunicationServiceClient() : 
                this(new CommunicationServiceClientCallback()) {
        }
        
        private CommunicationServiceClient(CommunicationServiceClientCallback callbackImpl) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl)) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<LogInCompletedEventArgs> LogInCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddPersonCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddWorkCenterCompleted;
        
        public event System.EventHandler<LoadDataCompletedEventArgs> LoadDataCompleted;
        
        public event System.EventHandler<NotifyReceivedEventArgs> NotifyReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientWithPoolProofOfConcept.ClientService.ICommunicationService.BeginLogIn(System.Guid owner, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogIn(owner, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int ClientWithPoolProofOfConcept.ClientService.ICommunicationService.EndLogIn(System.IAsyncResult result) {
            return base.Channel.EndLogIn(result);
        }
        
        private System.IAsyncResult OnBeginLogIn(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid owner = ((System.Guid)(inValues[0]));
            return ((ClientWithPoolProofOfConcept.ClientService.ICommunicationService)(this)).BeginLogIn(owner, callback, asyncState);
        }
        
        private object[] OnEndLogIn(System.IAsyncResult result) {
            int retVal = ((ClientWithPoolProofOfConcept.ClientService.ICommunicationService)(this)).EndLogIn(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLogInCompleted(object state) {
            if ((this.LogInCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogInCompleted(this, new LogInCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogInAsync(System.Guid owner) {
            this.LogInAsync(owner, null);
        }
        
        public void LogInAsync(System.Guid owner, object userState) {
            if ((this.onBeginLogInDelegate == null)) {
                this.onBeginLogInDelegate = new BeginOperationDelegate(this.OnBeginLogIn);
            }
            if ((this.onEndLogInDelegate == null)) {
                this.onEndLogInDelegate = new EndOperationDelegate(this.OnEndLogIn);
            }
            if ((this.onLogInCompletedDelegate == null)) {
                this.onLogInCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogInCompleted);
            }
            base.InvokeAsync(this.onBeginLogInDelegate, new object[] {
                        owner}, this.onEndLogInDelegate, this.onLogInCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientWithPoolProofOfConcept.ClientService.ICommunicationService.BeginAddPerson(ClientWithPoolProofOfConcept.Shared.Web.Person person, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddPerson(person, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ClientWithPoolProofOfConcept.ClientService.ICommunicationService.EndAddPerson(System.IAsyncResult result) {
            base.Channel.EndAddPerson(result);
        }
        
        private System.IAsyncResult OnBeginAddPerson(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            ClientWithPoolProofOfConcept.Shared.Web.Person person = ((ClientWithPoolProofOfConcept.Shared.Web.Person)(inValues[0]));
            return ((ClientWithPoolProofOfConcept.ClientService.ICommunicationService)(this)).BeginAddPerson(person, callback, asyncState);
        }
        
        private object[] OnEndAddPerson(System.IAsyncResult result) {
            ((ClientWithPoolProofOfConcept.ClientService.ICommunicationService)(this)).EndAddPerson(result);
            return null;
        }
        
        private void OnAddPersonCompleted(object state) {
            if ((this.AddPersonCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddPersonCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddPersonAsync(ClientWithPoolProofOfConcept.Shared.Web.Person person) {
            this.AddPersonAsync(person, null);
        }
        
        public void AddPersonAsync(ClientWithPoolProofOfConcept.Shared.Web.Person person, object userState) {
            if ((this.onBeginAddPersonDelegate == null)) {
                this.onBeginAddPersonDelegate = new BeginOperationDelegate(this.OnBeginAddPerson);
            }
            if ((this.onEndAddPersonDelegate == null)) {
                this.onEndAddPersonDelegate = new EndOperationDelegate(this.OnEndAddPerson);
            }
            if ((this.onAddPersonCompletedDelegate == null)) {
                this.onAddPersonCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddPersonCompleted);
            }
            base.InvokeAsync(this.onBeginAddPersonDelegate, new object[] {
                        person}, this.onEndAddPersonDelegate, this.onAddPersonCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientWithPoolProofOfConcept.ClientService.ICommunicationService.BeginAddWorkCenter(ClientWithPoolProofOfConcept.Shared.Web.WorkCenter workCenter, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddWorkCenter(workCenter, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ClientWithPoolProofOfConcept.ClientService.ICommunicationService.EndAddWorkCenter(System.IAsyncResult result) {
            base.Channel.EndAddWorkCenter(result);
        }
        
        private System.IAsyncResult OnBeginAddWorkCenter(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            ClientWithPoolProofOfConcept.Shared.Web.WorkCenter workCenter = ((ClientWithPoolProofOfConcept.Shared.Web.WorkCenter)(inValues[0]));
            return ((ClientWithPoolProofOfConcept.ClientService.ICommunicationService)(this)).BeginAddWorkCenter(workCenter, callback, asyncState);
        }
        
        private object[] OnEndAddWorkCenter(System.IAsyncResult result) {
            ((ClientWithPoolProofOfConcept.ClientService.ICommunicationService)(this)).EndAddWorkCenter(result);
            return null;
        }
        
        private void OnAddWorkCenterCompleted(object state) {
            if ((this.AddWorkCenterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddWorkCenterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddWorkCenterAsync(ClientWithPoolProofOfConcept.Shared.Web.WorkCenter workCenter) {
            this.AddWorkCenterAsync(workCenter, null);
        }
        
        public void AddWorkCenterAsync(ClientWithPoolProofOfConcept.Shared.Web.WorkCenter workCenter, object userState) {
            if ((this.onBeginAddWorkCenterDelegate == null)) {
                this.onBeginAddWorkCenterDelegate = new BeginOperationDelegate(this.OnBeginAddWorkCenter);
            }
            if ((this.onEndAddWorkCenterDelegate == null)) {
                this.onEndAddWorkCenterDelegate = new EndOperationDelegate(this.OnEndAddWorkCenter);
            }
            if ((this.onAddWorkCenterCompletedDelegate == null)) {
                this.onAddWorkCenterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddWorkCenterCompleted);
            }
            base.InvokeAsync(this.onBeginAddWorkCenterDelegate, new object[] {
                        workCenter}, this.onEndAddWorkCenterDelegate, this.onAddWorkCenterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientWithPoolProofOfConcept.ClientService.ICommunicationService.BeginLoadData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoadData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ClientWithPoolProofOfConcept.ClientService.DataDto ClientWithPoolProofOfConcept.ClientService.ICommunicationService.EndLoadData(System.IAsyncResult result) {
            return base.Channel.EndLoadData(result);
        }
        
        private System.IAsyncResult OnBeginLoadData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((ClientWithPoolProofOfConcept.ClientService.ICommunicationService)(this)).BeginLoadData(callback, asyncState);
        }
        
        private object[] OnEndLoadData(System.IAsyncResult result) {
            ClientWithPoolProofOfConcept.ClientService.DataDto retVal = ((ClientWithPoolProofOfConcept.ClientService.ICommunicationService)(this)).EndLoadData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoadDataCompleted(object state) {
            if ((this.LoadDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoadDataCompleted(this, new LoadDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoadDataAsync() {
            this.LoadDataAsync(null);
        }
        
        public void LoadDataAsync(object userState) {
            if ((this.onBeginLoadDataDelegate == null)) {
                this.onBeginLoadDataDelegate = new BeginOperationDelegate(this.OnBeginLoadData);
            }
            if ((this.onEndLoadDataDelegate == null)) {
                this.onEndLoadDataDelegate = new EndOperationDelegate(this.OnEndLoadData);
            }
            if ((this.onLoadDataCompletedDelegate == null)) {
                this.onLoadDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoadDataCompleted);
            }
            base.InvokeAsync(this.onBeginLoadDataDelegate, null, this.onEndLoadDataDelegate, this.onLoadDataCompletedDelegate, userState);
        }
        
        private void OnNotifyReceived(object state) {
            if ((this.NotifyReceived != null)) {
                object[] results = ((object[])(state));
                this.NotifyReceived(this, new NotifyReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void VerifyCallbackEvents() {
            if (((this.useGeneratedCallback != true) 
                        && (this.NotifyReceived != null))) {
                throw new System.InvalidOperationException("Callback events cannot be used when the callback InstanceContext is specified. Pl" +
                        "ease choose between specifying the callback InstanceContext or subscribing to th" +
                        "e callback events.");
            }
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ClientWithPoolProofOfConcept.ClientService.ICommunicationService CreateChannel() {
            return new CommunicationServiceClientChannel(this);
        }
        
        private class CommunicationServiceClientCallback : object, ICommunicationServiceCallback {
            
            private CommunicationServiceClient proxy;
            
            public void Initialize(CommunicationServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void Notify(System.ServiceModel.Channels.Message request) {
                this.proxy.OnNotifyReceived(new object[] {
                            request});
            }
        }
        
        private class CommunicationServiceClientChannel : ChannelBase<ClientWithPoolProofOfConcept.ClientService.ICommunicationService>, ClientWithPoolProofOfConcept.ClientService.ICommunicationService {
            
            public CommunicationServiceClientChannel(System.ServiceModel.DuplexClientBase<ClientWithPoolProofOfConcept.ClientService.ICommunicationService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginLogIn(System.Guid owner, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = owner;
                System.IAsyncResult _result = base.BeginInvoke("LogIn", _args, callback, asyncState);
                return _result;
            }
            
            public int EndLogIn(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("LogIn", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddPerson(ClientWithPoolProofOfConcept.Shared.Web.Person person, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = person;
                System.IAsyncResult _result = base.BeginInvoke("AddPerson", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddPerson(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddPerson", _args, result);
            }
            
            public System.IAsyncResult BeginAddWorkCenter(ClientWithPoolProofOfConcept.Shared.Web.WorkCenter workCenter, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = workCenter;
                System.IAsyncResult _result = base.BeginInvoke("AddWorkCenter", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddWorkCenter(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddWorkCenter", _args, result);
            }
            
            public System.IAsyncResult BeginLoadData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("LoadData", _args, callback, asyncState);
                return _result;
            }
            
            public ClientWithPoolProofOfConcept.ClientService.DataDto EndLoadData(System.IAsyncResult result) {
                object[] _args = new object[0];
                ClientWithPoolProofOfConcept.ClientService.DataDto _result = ((ClientWithPoolProofOfConcept.ClientService.DataDto)(base.EndInvoke("LoadData", _args, result)));
                return _result;
            }
        }
    }
    
    public class NotifyReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NotifyReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.ServiceModel.Channels.Message request {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.ServiceModel.Channels.Message)(this.results[0]));
            }
        }
    }
}
